<?php

declare(strict_types=1);

/*
 * This file is part of the Netaxept Payum Gateway package.
 *
 * (c) Andrew Plank
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Tests\TestCase\Action;

use FDM\Payum\Netaxept\Action\ConvertPaymentAction;
use FDM\Payum\Netaxept\Model\Payment;
use Payum\Core\Model\Token;
use Payum\Core\Request\Cancel;
use Payum\Core\Request\Capture;
use Payum\Core\Request\Convert;
use Payum\Core\Security\TokenInterface;
use PHPUnit\Framework\Assert;

class ConvertPaymentActionTest extends ApiTest
{
    public function testSupportsFailsWithIncorrectRequest()
    {
        $convertAction = new ConvertPaymentAction();
        $request = new Capture(new \stdClass());

        Assert::assertFalse($convertAction->supports($request));
    }

    public function testSupportsFailsWithCorrectRequestButIncorrectModel()
    {
        /** @var Token $tokenMock */
        $tokenMock = $this->createMock(TokenInterface::class);
        $convertAction = new ConvertPaymentAction();
        $request = new Convert([], 'array', $tokenMock);

        Assert::assertFalse($convertAction->supports($request));
    }

    public function testSupportsSucceedsWithCorrectRequest()
    {
        /** @var Token $tokenMock */
        $tokenMock = $this->createMock(TokenInterface::class);
        /** @var Payment $paymentMock */
        $paymentMock = $this->createMock(Payment::class);
        $convertAction = new ConvertPaymentAction();
        $request = new Convert($paymentMock, 'array', $tokenMock);

        Assert::assertTrue($convertAction->supports($request));
    }

    /**
     * @expectedException \Payum\Core\Exception\RequestNotSupportedException
     * @expectedExceptionMessage Action ConvertPaymentAction is not supported the request Cancel{model: ArrayObject}. Make sure the gateway supports the requests and there is an action which supports this request (The method returns true). There may be a bug, so look for a related issue on the issue tracker.
     */
    public function testExecuteFailsWithIncorrectRequest()
    {
        $convertAction = new ConvertPaymentAction();
        $request = new Cancel([]);

        $convertAction->execute($request);
    }

    public function testExecuteSucceedsWithAutoGeneratedTransactionIds()
    {
        /** @var Token $tokenMock */
        $tokenMock = $this->createMock(TokenInterface::class);
        /** @var Payment $paymentMock */
        $paymentMock = $this->createMock(Payment::class);
        $request = new Convert($paymentMock, 'array', $tokenMock);
        $paymentMock->method('getDetails')->willReturn([]);
        $paymentMock->method('getTransactionId')->willReturn('bd4ae2b322a94d2199fb950a432f08cd');
        $paymentMock->method('getDescription')->willReturn('this is the description');
        $paymentMock->method('getNumber')->willReturn('123456');
        $paymentMock->method('getCurrencyCode')->willReturn('DKK');
        $paymentMock->method('getTotalAmount')->willReturn(999900);
        $tokenMock->method('getTargetUrl')->willReturn('https://www.example.com/target');

        $convertAction = new ConvertPaymentAction(true, null);
        $convertAction->execute($request);

        Assert::assertEquals([
            'transactionId' => 'bd4ae2b322a94d2199fb950a432f08cd',
            'description' => 'this is the description',
            'orderNumber' => '123456',
            'currencyCode' => 'DKK',
            'amount' => 999900,
            'language' => 'da_DK',
            'redirectUrl' => 'https://www.example.com/target',
        ], $request->getResult());
    }

    public function testExecuteSucceedsWithCustomTransactionIds()
    {
        /** @var Token $tokenMock */
        $tokenMock = $this->createMock(TokenInterface::class);
        /** @var Payment $paymentMock */
        $paymentMock = $this->createMock(Payment::class);
        $request = new Convert($paymentMock, 'array', $tokenMock);
        $paymentMock->method('getDetails')->willReturn([]);
        $paymentMock->method('getDescription')->willReturn('this is the description');
        $paymentMock->method('getNumber')->willReturn('123456');
        $paymentMock->method('getCurrencyCode')->willReturn('DKK');
        $paymentMock->method('getTotalAmount')->willReturn(999900);
        $tokenMock->method('getTargetUrl')->willReturn('https://www.example.com/target');

        $convertAction = new ConvertPaymentAction(false, 'custom_trans_id_%08d');
        $convertAction->execute($request);

        Assert::assertEquals([
            'transactionId' => 'custom_trans_id_00123456',
            'description' => 'this is the description',
            'orderNumber' => '123456',
            'currencyCode' => 'DKK',
            'amount' => 999900,
            'language' => 'da_DK',
            'redirectUrl' => 'https://www.example.com/target',
        ], $request->getResult());
    }

    public function testExecuteSucceedsWithCustomTransactionIdsButNoTemplate()
    {
        /** @var Token $tokenMock */
        $tokenMock = $this->createMock(TokenInterface::class);
        /** @var Payment $paymentMock */
        $paymentMock = $this->createMock(Payment::class);
        $request = new Convert($paymentMock, 'array', $tokenMock);
        $paymentMock->method('getDetails')->willReturn([]);
        $paymentMock->method('getDescription')->willReturn('this is the description');
        $paymentMock->method('getNumber')->willReturn('123456');
        $paymentMock->method('getCurrencyCode')->willReturn('DKK');
        $paymentMock->method('getTotalAmount')->willReturn(999900);
        $tokenMock->method('getTargetUrl')->willReturn('https://www.example.com/target');

        $convertAction = new ConvertPaymentAction(false, null);
        $convertAction->execute($request);

        Assert::assertEquals([
            'transactionId' => '123456',
            'description' => 'this is the description',
            'orderNumber' => '123456',
            'currencyCode' => 'DKK',
            'amount' => 999900,
            'language' => 'da_DK',
            'redirectUrl' => 'https://www.example.com/target',
        ], $request->getResult());
    }

    public function testExecuteSucceedsWithNoToken()
    {
        /** @var Payment $paymentMock */
        $paymentMock = $this->createMock(Payment::class);
        $request = new Convert($paymentMock, 'array');
        $paymentMock->method('getDetails')->willReturn([]);
        $paymentMock->method('getTransactionId')->willReturn('bd4ae2b322a94d2199fb950a432f08cd');
        $paymentMock->method('getDescription')->willReturn('this is the description');
        $paymentMock->method('getNumber')->willReturn('123456');
        $paymentMock->method('getCurrencyCode')->willReturn('DKK');
        $paymentMock->method('getTotalAmount')->willReturn(999900);

        $convertAction = new ConvertPaymentAction(true, null);
        $convertAction->execute($request);

        Assert::assertEquals([
            'transactionId' => 'bd4ae2b322a94d2199fb950a432f08cd',
            'description' => 'this is the description',
            'orderNumber' => '123456',
            'currencyCode' => 'DKK',
            'amount' => 999900,
            'language' => 'da_DK',
        ], $request->getResult());
    }
}
